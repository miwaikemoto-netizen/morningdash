import React, { useEffect, useMemo, useState } from "react";

// ーー 設定 ーー
const THIS_YEAR = 2025; // 必要なら変更
const MONTHS = [9, 10, 11, 12];

// 月別タスク（浜松・暖地、あなたの計画ベース）
const monthlyTasksTemplate: Record<number, string[]> = {
  9: [
    "バラ 夏剪定（軽め）／樹形リフレッシュ",
    "バラ 液肥 週1開始（リン酸高め・〜10月）",
    "バラ 消毒（夏剪定後：殺菌＋必要で殺虫）",
    "温州みかん 液肥（実肥）",
    "宿根草 植付け・株分け（ゲラニウム/アストランティア/アキレア等）",
    "秋まき一年草 直播（ニゲラ/オルラヤ/リナリア等）",
    "秋花メンテ（ダリア/ガウラ/サルビア：花がら切り・支柱整理)",
  ],
  10: [
    "球根 植付け（チューリップ/スイセン/ムスカリ/クロッカス）",
    "寄せ植え（南側/場所未定プランの球根）",
    "バラ 秋花を楽しむ（中下旬）",
    "バラ 花後の弱剪定＆花がら切り",
    "バラ 液肥 週1継続（下旬で終了）",
    "バラ 消毒（秋花後に殺菌）",
    "常緑低木 植付けOK（ドドナエア/シルバープリペット等）",
    "冬野菜 苗定植（ブロッコリー/キャベツ/白菜/玉ねぎ）",
    "ハーブ 収穫・ドライ保存へ切替（耐寒弱は整理）",
  ],
  11: [
    "落葉樹 植付け（ハナミズキ/ガマズミ/モミジ 等）",
    "バラ リセット（病葉除去→殺菌散布）",
    "バラ 元肥 少量（※寒肥は冬本番に）",
    "宿根草 切戻し＆マルチング（腐葉土/ワラ）",
    "球根 遅植え分の処理（忘れ分の救済）",
    "屋上 カンナ/コロカシア 地上部整理・防風対策",
  ],
  12: [
    "庭木 定植ベスト（落葉/常緑）※寒波前に",
    "温州みかん 収穫（剪定は収穫後〜1月）",
    "バラ 落葉→全葉落とし",
    "バラ 石灰硫黄合剤（12月下旬〜1月・休眠期）",
    "寒肥の準備（12月下旬〜：バラ/果樹）",
    "鉢物 防寒（軒下へ移動・二重鉢/マルチング）",
    "屋上 フェルト鉢 風よけ・固定",
  ],
};

// ーー ユーティリティ ーー
const ymKey = (y: number, m: number) => `garden_tasks_${y}_${m}`;
const logKey = (y: number) => `garden_log_${y}`;

// CSV ユーティリティ
const toCSV = (rows: any[]) => {
  const header = [
    "日付",
    "天気・気温",
    "作業内容",
    "気づき",
    "対象植物No.",
    "写真リンク",
  ];
  const escape = (v: any) => {
    const s = (v ?? "").toString();
    if (s.includes(",") || s.includes("\n") || s.includes('"')) {
      return '"' + s.replace(/"/g, '""') + '"';
    }
    return s;
  };
  const lines = [header.join(",")];
  for (const r of rows) lines.push(header.map((h) => escape(r[h])).join(","));
  return lines.join("\n");
};

// ーー コンポーネント ーー
export default function GardeningDash() {
  const [year, setYear] = useState(THIS_YEAR);
  const [month, setMonth] = useState<number>(new Date().getMonth() + 1);
  useEffect(() => {
    if (!MONTHS.includes(month)) setMonth(9);
  }, []);

  // 月タスク管理
  const [tasks, setTasks] = useState<Record<number, { label: string; done: boolean }[]>>({});

  // 初期化 & 永続化
  useEffect(() => {
    const t: Record<number, { label: string; done: boolean }[]> = {};
    MONTHS.forEach((m) => {
      const raw = localStorage.getItem(ymKey(year, m));
      if (raw) t[m] = JSON.parse(raw);
      else t[m] = monthlyTasksTemplate[m].map((label) => ({ label, done: false }));
    });
    setTasks(t);
  }, [year]);

  useEffect(() => {
    // 保存
    MONTHS.forEach((m) => {
      if (tasks[m]) localStorage.setItem(ymKey(year, m), JSON.stringify(tasks[m]));
    });
  }, [tasks, year]);

  const addTask = (m: number, label: string) => {
    if (!label.trim()) return;
    setTasks((prev) => ({
      ...prev,
      [m]: [...(prev[m] || []), { label: label.trim(), done: false }],
    }));
  };

  const resetMonth = (m: number) => {
    if (!confirm(`${year}年${m}月のチェックをすべて外します。よろしいですか？`)) return;
    setTasks((prev) => ({
      ...prev,
      [m]: (prev[m] || []).map((t) => ({ ...t, done: false })),
    }));
  };

  // 日々の記録
  type Log = {
    id: string;
    年月日: string; // ISO
    日付: string; // 表示
    "天気・気温": string;
    作業内容: string;
    気づき: string;
    "対象植物No.": string;
    写真リンク: string;
  };

  const [logs, setLogs] = useState<Log[]>([]);
  useEffect(() => {
    const raw = localStorage.getItem(logKey(year));
    setLogs(raw ? JSON.parse(raw) : []);
  }, [year]);
  useEffect(() => {
    localStorage.setItem(logKey(year), JSON.stringify(logs));
  }, [logs, year]);

  const [form, setForm] = useState({
    date: new Date().toISOString().slice(0, 16), // yyyy-MM-ddTHH:mm
    weather: "",
    work: "",
    memo: "",
    plant: "",
    photo: "",
  });

  const submitLog = () => {
    const id = crypto.randomUUID();
    const d = new Date(form.date);
    const display = `${d.getFullYear()}/${String(d.getMonth() + 1).padStart(2, "0")}/${String(d.getDate()).padStart(2, "0")} ${String(d.getHours()).padStart(2, "0")}:${String(d.getMinutes()).padStart(2, "0")}`;
    const entry: Log = {
      id,
      年月日: d.toISOString(),
      日付: display,
      "天気・気温": form.weather,
      作業内容: form.work,
      気づき: form.memo,
      "対象植物No.": form.plant,
      写真リンク: form.photo,
    };
    setLogs((prev) => [entry, ...prev]);
    // 軽くリセット
    setForm((f) => ({ ...f, work: "", memo: "", plant: "", photo: "" }));
  };

  const deleteLog = (id: string) => setLogs((prev) => prev.filter((l) => l.id !== id));

  const exportCSV = () => {
    const rows = logs
      .map((l) => ({
        日付: l.日付,
        "天気・気温": l["天気・気温"],
        作業内容: l.作業内容,
        気づき: l.気づき,
        "対象植物No.": l["対象植物No."],
        写真リンク: l.写真リンク,
      }))
      .reverse(); // 古い順で出力
    const csv = toCSV(rows);
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `gardening_log_${year}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  };

  // UI
  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-950 to-slate-900 text-slate-100 p-4 md:p-8">
      <div className="max-w-5xl mx-auto space-y-6">
        <header className="flex items-center justify-between">
          <h1 className="text-2xl md:text-3xl font-bold">Gardening Dash｜{THIS_YEAR} 秋冬</h1>
          <div className="flex items-center gap-2">
            <select
              className="bg-slate-800 border border-white/10 rounded-xl px-3 py-2"
              value={year}
              onChange={(e) => setYear(parseInt(e.target.value))}
            >
              <option value={2025}>2025</option>
              <option value={2026}>2026</option>
            </select>
            <select
              className="bg-slate-800 border border-white/10 rounded-xl px-3 py-2"
              value={month}
              onChange={(e) => setMonth(parseInt(e.target.value))}
            >
              {MONTHS.map((m) => (
                <option key={m} value={m}>
                  {m}月
                </option>
              ))}
            </select>
          </div>
        </header>

        {/* 今月のチェックリスト */}
        <section className="bg-slate-900/60 border border-white/10 rounded-2xl shadow p-4 md:p-6">
          <div className="flex items-center justify-between mb-3">
            <h2 className="text-xl font-semibold">今月のチェックリスト（{month}月）</h2>
            <div className="flex gap-2">
              <button
                className="px-3 py-2 rounded-xl bg-indigo-600 hover:bg-indigo-500"
                onClick={() => {
                  const label = prompt("この月にタスクを追加");
                  if (label) addTask(month, label);
                }}
              >
                追加
              </button>
              <button
                className="px-3 py-2 rounded-xl bg-slate-800 border border-white/10 hover:bg-slate-700"
                onClick={() => resetMonth(month)}
              >
                全チェック解除
              </button>
            </div>
          </div>
          <ul className="space-y-2">
            {(tasks[month] || []).map((t, idx) => (
              <li key={idx} className="flex items-start gap-3">
                <input
                  type="checkbox"
                  className="h-5 w-5 mt-1 accent-indigo-500"
                  checked={t.done}
                  onChange={(e) =>
                    setTasks((prev) => ({
                      ...prev,
                      [month]: prev[month].map((x, i) => (i === idx ? { ...x, done: e.target.checked } : x)),
                    }))
                  }
                />
                <span className={t.done ? "line-through text-slate-400" : ""}>{t.label}</span>
              </li>
            ))}
          </ul>
          <p className="text-sm text-slate-400 mt-4">※ チェックは端末内（localStorage）に保存されます。</p>
        </section>

        {/* 日々の記録 */}
        <section className="bg-slate-900/60 border border-white/10 rounded-2xl shadow p-4 md:p-6 space-y-4">
          <h2 className="text-xl font-semibold">日々の記録</h2>
          <div className="grid md:grid-cols-2 gap-4">
            <div className="space-y-3">
              <label className="block text-sm">
                日付
                <input
                  type="datetime-local"
                  className="w-full mt-1 bg-slate-800 border border-white/10 rounded-xl px-3 py-2"
                  value={form.date}
                  onChange={(e) => setForm((f) => ({ ...f, date: e.target.value }))}
                />
              </label>
              <label className="block text-sm">
                天気・気温
                <input
                  type="text"
                  placeholder="例：晴れ 29℃"
                  className="w-full mt-1 bg-slate-800 border border-white/10 rounded-xl px-3 py-2"
                  value={form.weather}
                  onChange={(e) => setForm((f) => ({ ...f, weather: e.target.value }))}
                />
              </label>
              <label className="block text-sm">
                作業内容
                <textarea
                  placeholder="例：水やり／球根植付け など"
                  className="w-full mt-1 bg-slate-800 border border-white/10 rounded-xl px-3 py-2 h-24"
                  value={form.work}
                  onChange={(e) => setForm((f) => ({ ...f, work: e.target.value }))}
                />
              </label>
            </div>
            <div className="space-y-3">
              <label className="block text-sm">
                気づき
                <textarea
                  placeholder="例：夕方の風が心地いい／葉色が薄い など"
                  className="w-full mt-1 bg-slate-800 border border-white/10 rounded-xl px-3 py-2 h-24"
                  value={form.memo}
                  onChange={(e) => setForm((f) => ({ ...f, memo: e.target.value }))}
                />
              </label>
              <label className="block text-sm">
                対象植物No.
                <input
                  type="text"
                  placeholder="例：R-012"
                  className="w-full mt-1 bg-slate-800 border border-white/10 rounded-xl px-3 py-2"
                  value={form.plant}
                  onChange={(e) => setForm((f) => ({ ...f, plant: e.target.value }))}
                />
              </label>
              <label className="block text-sm">
                写真リンク
                <input
                  type="url"
                  placeholder="https://..."
                  className="w-full mt-1 bg-slate-800 border border-white/10 rounded-xl px-3 py-2"
                  value={form.photo}
                  onChange={(e) => setForm((f) => ({ ...f, photo: e.target.value }))}
                />
              </label>
            </div>
          </div>
          <div className="flex flex-wrap gap-3">
            <button className="px-4 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-500" onClick={submitLog}>
              追加
            </button>
            <button className="px-4 py-2 rounded-xl bg-slate-800 border border-white/10 hover:bg-slate-700" onClick={exportCSV}>
              CSVを書き出す
            </button>
          </div>

          <div className="mt-6">
            <h3 className="font-medium mb-2">記録一覧（新しい順）</h3>
            <div className="overflow-x-auto">
              <table className="w-full text-sm border-separate border-spacing-y-2">
                <thead className="text-slate-300">
                  <tr>
                    <th className="text-left px-3">日付</th>
                    <th className="text-left px-3">天気・気温</th>
                    <th className="text-left px-3">作業内容</th>
                    <th className="text-left px-3">気づき</th>
                    <th className="text-left px-3">植物No.</th>
                    <th className="text-left px-3">写真</th>
                    <th className="px-3"></th>
                  </tr>
                </thead>
                <tbody>
                  {logs.map((l) => (
                    <tr key={l.id} className="bg-slate-800/60">
                      <td className="px-3 py-2 whitespace-nowrap">{l.日付}</td>
                      <td className="px-3 py-2">{l["天気・気温"]}</td>
                      <td className="px-3 py-2 max-w-[22rem] truncate" title={l.作業内容}>
                        {l.作業内容}
                      </td>
                      <td className="px-3 py-2 max-w-[22rem] truncate" title={l.気づき}>
                        {l.気づき}
                      </td>
                      <td className="px-3 py-2">{l["対象植物No."]}</td>
                      <td className="px-3 py-2">
                        {l.写真リンク ? (
                          <a className="underline text-indigo-300" href={l.写真リンク} target="_blank" rel="noreferrer">
                            開く
                          </a>
                        ) : (
                          "—"
                        )}
                      </td>
                      <td className="px-3 py-2 text-right">
                        <button
                          className="px-3 py-1 rounded-lg bg-red-600/80 hover:bg-red-600"
                          onClick={() => deleteLog(l.id)}
                        >
                          削除
                        </button>
                      </td>
                    </tr>
                  ))}
                  {logs.length === 0 && (
                    <tr>
                      <td colSpan={7} className="text-center text-slate-400 py-8">
                        まだ記録がありません。
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </section>

        {/* ヒント */}
        <section className="text-sm text-slate-400">
          <p>※ このアプリはブラウザ上で動き、チェックや記録は端末内（localStorage）に保存されます。Safari/Chromeのブックマークやホーム画面に追加すると忘れにくいです。</p>
        </section>
      </div>
    </div>
  );
}
